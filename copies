def largest_label_volume(im, bg=-1):
    vals, counts = np.unique(im, return_counts=True)

    counts = counts[vals != bg]
    vals = vals[vals != bg]

    if len(counts) > 0:
        return vals[np.argmax(counts)]
    else:
        return None

def segment_lung_mask(image, fill_lung_structures=True):
    
    # not actually binary, but 1 and 2. 
    # 0 is treated as background, which we do not want
    binary_image = np.array(image > 0.13, dtype=np.int8)+1
    labels = measure.label(binary_image)
    
    # Pick the pixel in the very corner to determine which label is air.
    #   Improvement: Pick multiple background labels from around the patient
    #   More resistant to "trays" on which the patient lays cutting the air 
    #   around the person in half
    background_label = labels[2,260,20]
    
    #Fill the air around the person
    binary_image[background_label == labels] = 2
    
    
    # Method of filling the lung structures (that is superior to something like 
    # morphological closing)
    if fill_lung_structures:
        # For every slice we determine the largest solid structure
        for i, axial_slice in enumerate(binary_image):
            axial_slice = axial_slice - 1
            labeling = measure.label(axial_slice)
            l_max = largest_label_volume(labeling, bg=0)
            
            if l_max is not None: #This slice contains some lung
                binary_image[i][labeling != l_max] = 1

    
    binary_image -= 1 #Make the image actual binary
    binary_image = 1-binary_image # Invert it, lungs are now 1
    
    # Remove other air pockets insided body
    labels = measure.label(binary_image, background=0)
    l_max = largest_label_volume(labels, bg=0)
    if l_max is not None: # There are air pockets
        binary_image[labels != l_max] = 0
 
    return binary_image
    
    
    
    
    
    i=1
j=i+1

while i<j:
    
    s = '{:1f}'.format(i/10000)
    pid = 'LIDC-IDRI-' + s[2:6]
    
    scan = pl.query(pl.Scan).filter(pl.Scan.patient_id == pid)
    lul = scan[0].to_volume()
    vol = np.copy(lul)
    
    #vol[vol<np.mean(vol[10,245:265,20:40])*4]=np.mean(vol[10,245:265,20:40]*4)
    vol[vol<vol[3,250,150]]=0
    vol = vol - np.min(vol)
    vol = vol / np.max(vol)
    #vol[280:290,220:285,195:205]= 0
    
    segmented_lungs_fill = segment_lung_mask(vol, True)
    seg = scipy.ndimage.binary_dilation(segmented_lungs_fill, iterations=5).astype(int)
    
    plt.imshow(seg[:,:,30])
    plt.imshow(seg*vol[:,:,30])

    #np.savez_compressed(''+str(i), vol*seg)
    print(i)
    i+=1
